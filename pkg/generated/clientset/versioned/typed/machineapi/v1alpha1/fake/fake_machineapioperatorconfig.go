// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openshift/machine-api-operator/pkg/apis/machineapi/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeMachineAPIOperatorConfigs implements MachineAPIOperatorConfigInterface
type FakeMachineAPIOperatorConfigs struct {
	Fake *FakeMachineapiV1alpha1
}

var machineapioperatorconfigsResource = schema.GroupVersionResource{Group: "machineapi.operator.openshift.io", Version: "v1alpha1", Resource: "machineapioperatorconfigs"}

var machineapioperatorconfigsKind = schema.GroupVersionKind{Group: "machineapi.operator.openshift.io", Version: "v1alpha1", Kind: "MachineAPIOperatorConfig"}

// Get takes name of the machineAPIOperatorConfig, and returns the corresponding machineAPIOperatorConfig object, and an error if there is any.
func (c *FakeMachineAPIOperatorConfigs) Get(name string, options v1.GetOptions) (result *v1alpha1.MachineAPIOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(machineapioperatorconfigsResource, name), &v1alpha1.MachineAPIOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MachineAPIOperatorConfig), err
}

// List takes label and field selectors, and returns the list of MachineAPIOperatorConfigs that match those selectors.
func (c *FakeMachineAPIOperatorConfigs) List(opts v1.ListOptions) (result *v1alpha1.MachineAPIOperatorConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(machineapioperatorconfigsResource, machineapioperatorconfigsKind, opts), &v1alpha1.MachineAPIOperatorConfigList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.MachineAPIOperatorConfigList{ListMeta: obj.(*v1alpha1.MachineAPIOperatorConfigList).ListMeta}
	for _, item := range obj.(*v1alpha1.MachineAPIOperatorConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested machineAPIOperatorConfigs.
func (c *FakeMachineAPIOperatorConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(machineapioperatorconfigsResource, opts))
}

// Create takes the representation of a machineAPIOperatorConfig and creates it.  Returns the server's representation of the machineAPIOperatorConfig, and an error, if there is any.
func (c *FakeMachineAPIOperatorConfigs) Create(machineAPIOperatorConfig *v1alpha1.MachineAPIOperatorConfig) (result *v1alpha1.MachineAPIOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(machineapioperatorconfigsResource, machineAPIOperatorConfig), &v1alpha1.MachineAPIOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MachineAPIOperatorConfig), err
}

// Update takes the representation of a machineAPIOperatorConfig and updates it. Returns the server's representation of the machineAPIOperatorConfig, and an error, if there is any.
func (c *FakeMachineAPIOperatorConfigs) Update(machineAPIOperatorConfig *v1alpha1.MachineAPIOperatorConfig) (result *v1alpha1.MachineAPIOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(machineapioperatorconfigsResource, machineAPIOperatorConfig), &v1alpha1.MachineAPIOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MachineAPIOperatorConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeMachineAPIOperatorConfigs) UpdateStatus(machineAPIOperatorConfig *v1alpha1.MachineAPIOperatorConfig) (*v1alpha1.MachineAPIOperatorConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(machineapioperatorconfigsResource, "status", machineAPIOperatorConfig), &v1alpha1.MachineAPIOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MachineAPIOperatorConfig), err
}

// Delete takes name of the machineAPIOperatorConfig and deletes it. Returns an error if one occurs.
func (c *FakeMachineAPIOperatorConfigs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(machineapioperatorconfigsResource, name), &v1alpha1.MachineAPIOperatorConfig{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMachineAPIOperatorConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(machineapioperatorconfigsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.MachineAPIOperatorConfigList{})
	return err
}

// Patch applies the patch and returns the patched machineAPIOperatorConfig.
func (c *FakeMachineAPIOperatorConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.MachineAPIOperatorConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(machineapioperatorconfigsResource, name, data, subresources...), &v1alpha1.MachineAPIOperatorConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MachineAPIOperatorConfig), err
}
