// Code generated by go-bindata.
// sources:
// bindata/v4.0.0/clusterapi-manager/clusterapi-manager-cluster-role-binding.yaml
// bindata/v4.0.0/clusterapi-manager/clusterapi-manager-cluster-role.yaml
// bindata/v4.0.0/clusterapi-manager/cm.yaml
// bindata/v4.0.0/clusterapi-manager/defaultconfig.yaml
// bindata/v4.0.0/clusterapi-manager/deployment.yaml
// bindata/v4.0.0/clusterapi-manager/operator-config.yaml
// bindata/v4.0.0/clusterapi-manager/sa.yaml
// DO NOT EDIT!

package v400_00_assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _v400ClusterapiManagerClusterapiManagerClusterRoleBindingYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-api-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-api-manager-role
subjects:
- kind: ServiceAccount
  name: openshift-clusterapi-sa
  namespace: {{ .TargetNamespace }}
`)

func v400ClusterapiManagerClusterapiManagerClusterRoleBindingYamlBytes() ([]byte, error) {
	return _v400ClusterapiManagerClusterapiManagerClusterRoleBindingYaml, nil
}

func v400ClusterapiManagerClusterapiManagerClusterRoleBindingYaml() (*asset, error) {
	bytes, err := v400ClusterapiManagerClusterapiManagerClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v4.0.0/clusterapi-manager/clusterapi-manager-cluster-role-binding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v400ClusterapiManagerClusterapiManagerClusterRoleYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: cluster-api-manager-role
rules:
- apiGroups:
  - cluster.k8s.io
  resources:
  - clusters
  - clusters/status
  - machines
  - machines/status
  - machinesets
  - machinesets/status
  - machinedeployments
  - machinedeployments/status
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete`)

func v400ClusterapiManagerClusterapiManagerClusterRoleYamlBytes() ([]byte, error) {
	return _v400ClusterapiManagerClusterapiManagerClusterRoleYaml, nil
}

func v400ClusterapiManagerClusterapiManagerClusterRoleYaml() (*asset, error) {
	bytes, err := v400ClusterapiManagerClusterapiManagerClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v4.0.0/clusterapi-manager/clusterapi-manager-cluster-role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v400ClusterapiManagerCmYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  namespace: openshift-cluster-api
  name: deployment-clusterapi-manager-config
data:
  config.yaml:
`)

func v400ClusterapiManagerCmYamlBytes() ([]byte, error) {
	return _v400ClusterapiManagerCmYaml, nil
}

func v400ClusterapiManagerCmYaml() (*asset, error) {
	bytes, err := v400ClusterapiManagerCmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v4.0.0/clusterapi-manager/cm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v400ClusterapiManagerDefaultconfigYaml = []byte(`apiVersion: openshiftcontrolplane.config.openshift.io/v1
kind: MachineOpenShiftAPIServerConfig
`)

func v400ClusterapiManagerDefaultconfigYamlBytes() ([]byte, error) {
	return _v400ClusterapiManagerDefaultconfigYaml, nil
}

func v400ClusterapiManagerDefaultconfigYaml() (*asset, error) {
	bytes, err := v400ClusterapiManagerDefaultconfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v4.0.0/clusterapi-manager/defaultconfig.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v400ClusterapiManagerDeploymentYaml = []byte(`apiVersion: apps/v1
kind: Deployment
metadata:
  name: clusterapi-manager-controllers
  namespace: {{ .TargetNamespace }}
  labels:
    api: clusterapi
    k8s-app: controller
    tectonic-operators.coreos.com/managed-by: machine-api-operator
spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
  selector:
    matchLabels:
      api: clusterapi
      k8s-app: controller
  replicas: 1
  template:
    metadata:
      labels:
        api: clusterapi
        k8s-app: controller
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        key: node.alpha.kubernetes.io/notReady
        operator: Exists
      - effect: NoExecute
        key: node.alpha.kubernetes.io/unreachable
        operator: Exists
      containers:
      - name: controller-manager
        image: {{ .Controllers.Provider }}
        command:
        - "./manager"
        resources:
          requests:
            cpu: 100m
            memory: 20Mi
          limits:
            cpu: 100m
            memory: 30Mi
      - name: machine-controller
        image: {{ .Controllers.Provider }}
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        command:
          - /machine-controller-manager
        args:
          - --logtostderr=true
          - --v=3
      - name: nodelink-controller
        image: {{ .Controllers.NodeLink }}
        command:
          - /nodelink-controller
        args:
          - --logtostderr=true
          - --v=3
        resources:
          requests:
            cpu: 100m
            memory: 20Mi
          limits:
            cpu: 100m
            memory: 30Mi
`)

func v400ClusterapiManagerDeploymentYamlBytes() ([]byte, error) {
	return _v400ClusterapiManagerDeploymentYaml, nil
}

func v400ClusterapiManagerDeploymentYaml() (*asset, error) {
	bytes, err := v400ClusterapiManagerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v4.0.0/clusterapi-manager/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v400ClusterapiManagerOperatorConfigYaml = []byte(`apiVersion: openshiftapiserver.operator.openshift.io/v1alpha1
kind: OpenShiftAPIServerOperatorConfig
metadata:
  name: instance
spec:
  managementState: Managed
  imagePullSpec: openshift/origin-hypershift:latest
  version: 3.11.0
  logging:
    level: 4
  replicas: 2
`)

func v400ClusterapiManagerOperatorConfigYamlBytes() ([]byte, error) {
	return _v400ClusterapiManagerOperatorConfigYaml, nil
}

func v400ClusterapiManagerOperatorConfigYaml() (*asset, error) {
	bytes, err := v400ClusterapiManagerOperatorConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v4.0.0/clusterapi-manager/operator-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v400ClusterapiManagerSaYaml = []byte(`apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: openshift-cluster-api
  name: openshift-clusterapi-sa
`)

func v400ClusterapiManagerSaYamlBytes() ([]byte, error) {
	return _v400ClusterapiManagerSaYaml, nil
}

func v400ClusterapiManagerSaYaml() (*asset, error) {
	bytes, err := v400ClusterapiManagerSaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v4.0.0/clusterapi-manager/sa.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"v4.0.0/clusterapi-manager/clusterapi-manager-cluster-role-binding.yaml": v400ClusterapiManagerClusterapiManagerClusterRoleBindingYaml,
	"v4.0.0/clusterapi-manager/clusterapi-manager-cluster-role.yaml":         v400ClusterapiManagerClusterapiManagerClusterRoleYaml,
	"v4.0.0/clusterapi-manager/cm.yaml":                                      v400ClusterapiManagerCmYaml,
	"v4.0.0/clusterapi-manager/defaultconfig.yaml":                           v400ClusterapiManagerDefaultconfigYaml,
	"v4.0.0/clusterapi-manager/deployment.yaml":                              v400ClusterapiManagerDeploymentYaml,
	"v4.0.0/clusterapi-manager/operator-config.yaml":                         v400ClusterapiManagerOperatorConfigYaml,
	"v4.0.0/clusterapi-manager/sa.yaml":                                      v400ClusterapiManagerSaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"v4.0.0": {nil, map[string]*bintree{
		"clusterapi-manager": {nil, map[string]*bintree{
			"clusterapi-manager-cluster-role-binding.yaml": {v400ClusterapiManagerClusterapiManagerClusterRoleBindingYaml, map[string]*bintree{}},
			"clusterapi-manager-cluster-role.yaml":         {v400ClusterapiManagerClusterapiManagerClusterRoleYaml, map[string]*bintree{}},
			"cm.yaml":              {v400ClusterapiManagerCmYaml, map[string]*bintree{}},
			"defaultconfig.yaml":   {v400ClusterapiManagerDefaultconfigYaml, map[string]*bintree{}},
			"deployment.yaml":      {v400ClusterapiManagerDeploymentYaml, map[string]*bintree{}},
			"operator-config.yaml": {v400ClusterapiManagerOperatorConfigYaml, map[string]*bintree{}},
			"sa.yaml":              {v400ClusterapiManagerSaYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
